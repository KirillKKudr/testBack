{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Money Guard app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of Money Guard app"
  },
  "servers": [
    {
      "url": null
    },
    {
      "url": "http://localhost:3000/api-docs/"
    }
  ],
  "tags": [
    {
      "name": "Transactions",
      "description": "Operations about transactions."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "User",
      "description": "User operations."
    },
    {
      "name": "Categories",
      "description": "Operations with income and expense categories."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "security": [],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Register a user with credentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe",
                    "maxLength": 64
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "maxLength": 64,
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 64,
                    "example": "securePassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfull register a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "user"
                  ],
                  "properties": {
                    "user": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "security": [],
        "summary": "Login a new user",
        "operationId": "loginUser",
        "description": "Login a user with credentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "maxLength": 64,
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 64,
                    "example": "securePassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful user login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "user",
                    "token"
                  ],
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The unique identifier of the user",
                          "example": 123
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "john.doe@example.com"
                        },
                        "balance": {
                          "type": "number",
                          "format": "float",
                          "description": "The current balance of the user",
                          "example": 150.75
                        }
                      }
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDdkZDA3NDE3NmIyNmI2NzhmNDcxYSIsImlhdCI6MTc0NTM5OTk5OSwiZXhwIjoxNzQ1NDg2Mzk5fQ.SO0oSy_qAwmBBYuNciENTjefeojFS5fbmF-tishRyxQ"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "security": [],
        "summary": "Logout a user",
        "operationId": "logoutUser",
        "description": "Logout a user",
        "responses": {
          "204": {
            "description": "User successfully logged out",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user/current": {
      "get": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get current user information",
        "description": "Get information in collection about the current authenticated user.",
        "operationId": "getCurrent",
        "responses": {
          "200": {
            "description": "Successfully get current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "user"
                  ],
                  "properties": {
                    "user": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/user/update": {
      "patch": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update user information",
        "operationId": "updateUser",
        "description": "Update specific fields of the current user. Requires authorization token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User's name",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "maxLength": 64,
                    "description": "Valid email address",
                    "example": "test@example.com"
                  },
                  "balance": {
                    "type": "number",
                    "description": "User's balance",
                    "example": 0
                  }
                },
                "additionalProperties": false,
                "minProperties": 1
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get all transactions",
        "description": "Get all transactions in collection for the authenticated user.",
        "operationId": "getTransactions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/transaction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create a new transaction",
        "description": "Creates a new income or expense transaction for the authenticated user.",
        "operationId": "createTransaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "category",
                  "date",
                  "sum"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Transaction type",
                    "enum": [
                      "income",
                      "expense"
                    ],
                    "example": "expense"
                  },
                  "category": {
                    "type": "string",
                    "description": "Name of the transaction category (must be an existing category)",
                    "example": "Products"
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "Transaction date",
                    "example": "2025-04-23"
                  },
                  "sum": {
                    "type": "number",
                    "description": "Transaction amount",
                    "example": 350
                  },
                  "comment": {
                    "type": "string",
                    "description": "Optional comment",
                    "example": "Grocery shopping"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transaction by id",
        "description": "Get one particular transaction in collection for the authenticated user.",
        "operationId": "getTransaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67f24579c88bd1471149b7ca"
            },
            "description": "The ID to find the transaction"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete transaction by ID",
        "operationId": "deleteTransaction",
        "description": "Deletes a transaction by its ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67f24579c88bd1471149b7ca"
            },
            "description": "The ID of the transaction to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "patch": {
        "tags": [
          "Transactions"
        ],
        "summary": "Update transaction by ID",
        "operationId": "updateTransaction",
        "description": "Updates an existing transaction by its ID for the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67f24579c88bd1471149b7ca"
            },
            "description": "The ID of the transaction to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "income",
                      "expense"
                    ],
                    "description": "Transaction type",
                    "example": "income"
                  },
                  "category": {
                    "type": "string",
                    "description": "Category name of the transaction",
                    "example": "Salary"
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "Transaction date",
                    "example": "2025-04-27"
                  },
                  "sum": {
                    "type": "number",
                    "description": "Transaction amount",
                    "example": 1200
                  },
                  "comment": {
                    "type": "string",
                    "description": "Optional comment",
                    "example": "Monthly salary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/summary": {
      "get": {
        "tags": [
          "Summary"
        ],
        "summary": "Get financial summary for a specific month and year",
        "description": "Returns the total income and expenses, broken down by category, for the authenticated user for the specified month and year.",
        "operationId": "getSummaryByMonthYear",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "month",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The month number (1-12)",
              "minimum": 1,
              "maximum": 12,
              "example": 5
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The year (starting from 2020)",
              "minimum": 2020,
              "example": 2025
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the summary data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "expenses": {
                      "type": "object",
                      "properties": {
                        "byCategory": {
                          "type": "object",
                          "description": "An object where keys are expense category names and values are their total amounts.",
                          "example": {
                            "Products": 2000,
                            "Car": 2500,
                            "Main expenses": 500,
                            "Leisure": 600
                          }
                        },
                        "total": {
                          "type": "integer",
                          "description": "The total expenses for the specified period.",
                          "example": 5600
                        }
                      }
                    },
                    "income": {
                      "type": "object",
                      "properties": {
                        "byCategory": {
                          "type": "object",
                          "description": "An object where keys are income category names and values are their total amounts.",
                          "example": {
                            "Income": 7500
                          }
                        },
                        "total": {
                          "type": "integer",
                          "description": "The total income for the specified period.",
                          "example": 7500
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "description": "Gets a list of all income and expense categories.",
        "operationId": "getCategories",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully obtaining categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Income",
                    "Main expenses",
                    "Products",
                    "Car",
                    "Self care",
                    "Child care",
                    "Household products",
                    "Education",
                    "Leisure",
                    "Other expenses",
                    "Entertainment"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/categories/{categoryId}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transactions by category ID",
        "description": "Get all transactions for the authenticated user within a specific category.",
        "operationId": "getTransactionsByCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "660ab7235d4d0c001c776ff8"
            },
            "description": "The ID of the category to filter transactions by"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found transactions by category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/transaction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "password"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "test@example.com"
          },
          "password": {
            "description": "User's password",
            "type": "string",
            "example": "qwerty1234"
          },
          "balance": {
            "description": "User's balance",
            "type": "number",
            "example": 0
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID categories",
            "example": "65f1234abcd5678ef9012345"
          },
          "title": {
            "type": "string",
            "description": "Category name",
            "example": "Products"
          },
          "type": {
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "description": "Category type (\"income\" or \"expense\")",
            "example": "expense"
          }
        }
      },
      "transaction": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Transaction ID (generated by the server)",
            "example": "65f1234abcd5678ef9012345"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user who owns the transaction (generated by the server)",
            "example": "660ab7235d4d0c001c776ff9"
          },
          "type": {
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "description": "Type of transaction",
            "example": "expense"
          },
          "categoryId": {
            "$ref": "#/components/schemas/category",
            "description": "Category of the transaction. For 'expense', one of 'Main expenses', 'Products', 'Car', 'Self care', 'Child care', 'Household products', 'Education', 'Leisure', 'Other expenses', 'Entertainment'. For 'income', 'Income'.",
            "example": "Products"
          },
          "date": {
            "type": "string",
            "description": "Transaction date (YYYY-MM-DD or ISO 8601 format)",
            "example": "2025-04-23"
          },
          "sum": {
            "type": "number",
            "description": "Amount of the transaction",
            "example": 350
          },
          "comment": {
            "type": "string",
            "description": "Optional comment",
            "example": "Grocery shopping"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "\\\"email\\\" must be a valid email"
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "string",
                  "example": "User not found!"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "string",
                  "example": "Router not found!"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "string",
                  "example": "Email in use"
                }
              }
            }
          }
        }
      },
      "422": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "code": {
                  "type": "integer",
                  "example": 422
                },
                "message": {
                  "type": "string",
                  "example": {
                    "Validation failed": "sum must be between 0.01 and 1000000"
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong!"
                },
                "data": {
                  "type": "string",
                  "example": "Internal server error"
                }
              }
            }
          }
        }
      }
    }
  }
}